number of runs;  1.000
Limit per run;   921.030
array length;    10.000
ratio 100 * m/n; 0,12384 -> easy
input type;      Carsten Witts worst case input (1/3, 1/3, 1/(3(n-2)), ...) (4)
Fields with sum; 2
Input: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ..., 1, 1, 1, 1, 1, 1, 1, 1, 5344, 5344]
---------
algo type;             pmut;      pmut;      pmut;      pmut;      pmut;      pmut;      pmut;      pmut;      pmut
algo param;           -1,25;     -1,50;     -1,75;     -2,00;     -2,25;     -2,50;     -2,75;     -3,00;     -3,25
avg mut/change;     192,353;    68,078;    23,956;     8,809;     4,373;     2,860;     2,111;     1,770;     1,578
avg mut/step;       220,467;    68,897;    22,423;     8,578;     4,410;     2,922;     2,271;     1,934;     1,729
---------
total avg count;         41;        88;       211;       493;       956;     2.272;    13.622;    16.503;    20.333
avg eval count;          41;        88;       211;       493;       956;     1.353;     1.670;     1.795;     1.952
max eval count;         212;       753;     1.704;     5.933;     8.957;    19.703;    11.437;    11.593;    12.032
min eval count;           0;         0;         0;         0;         0;         0;         0;         0;         0
---------
fails;                    0;         0;         0;         0;         0;         1;        13;        16;        20
fail ratio;           0,000;     0,000;     0,000;     0,000;     0,000;     0,001;     0,013;     0,016;     0,020
avg fail dif;            -1;        -1;        -1;        -1;        -1;       345;       345;       345;       345
---------
RLS     -> standard RLS: uniform random neighbour with Hamming Distance == 1
RLS-N   -> modified RLS: uniform random neighbour with Hamming Distance <= n
RLS-R   -> modified RLS: uniform random neighbour with Hamming Distance == x, where x is chosen uniform random from {1,...,r}
EA      -> standard EA : each bit is flipped with prob 1/n
EA-SM   -> modified EA : each bit is flipped with prob c/n
fmut    -> 1 bit flip with prob p and uniform random amount with 1-p
pmut    -> flips k random bits where k is chosen from powerlaw distribution
