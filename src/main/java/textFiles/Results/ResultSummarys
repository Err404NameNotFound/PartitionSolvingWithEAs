TwoThirds
    - rls; n=3;    r=4;    r=3;    r=2;    n=4;      -;    n=2
    - ea; 100/n;   50/n;   10/n;    5/n;    4/n;    3/n;    2/n;      -
    - pmut; -1,25;   -1,50;   -1,75;   -2,00;   -2,25;   -2,50;   -2,75;   -3,00;   -3,25
    - nur standard RLS läuft in den worst case
    -> allgemein je größer desto besser
algo type;           pmut;   EA-SM;   RLS-N
algo param;         -1,25;   100/n;     k=3
total avg count;       42;      68;   1.216

----------------------------------------------------------------------------------------------------

"OneMax"
    - rls; -;     r=2;     r=3;     r=4;     n=2;     n=3;     n=4
    - ea; -;     2/n;     3/n;     4/n;     5/n;    10/n;    50/n;   100/n
    - pmut; -3,25;   -3,00;   -2,75;   -2,50;   -2,25;   -2,00;   -1,75;   -1,50;   -1,25
    - Beste Mutationsrate bei 1,0
    - sinkende Performance bei steigender Rate
    - rls Neighbours kommen nie zum ergebnis
algo type;            RLS;    pmut;      EA
algo param;             -;   -3,25;       -
total avg count;   91.171; 143.121; 231.082

----------------------------------------------------------------------------------------------------

Uniform zwischen 1 und 50.000 bei Array Länge 50.000
    -rls; n=2;       r=3;       r=4;       n=3;       r=2;       n=4;         -
    -ea; 3/n;       2/n;       4/n;       5/n;      10/n;         -;      50/n;     100/n
    -pmut; -2,25;     -2,00;     -3,00;     -2,75;     -2,50;     -1,75;     -1,50;     -3,25;     -1,25
    - Ähnlich zu Binomialverteilung tauschen wichtig daher n=2 bzw p=3/n
    - RLS deutlich schlechter als (1+1) EA -> 447 mal ans Limit statt 0 mal

----------------------------------------------------------------------------------------------------

Binomial verteilt mit p = 0,01 und n = 10.000
    -rls; n=2;     n=4;     r=2;     r=4;     r=3;     n=3;       -
    -ea; 3/n;     4/n;     2/n;     5/n;       -;    10/n;    50/n;   100/n
    -pmut;

    - Ähnliche Ergebnisse wie uniform und exponential aber deutlich drastischer
    - RLS kommt nur mit Glück durch initialer Verteilung auf exaktes Ergebnis
    - EA; 2 und 4 ähnlich gut aber optimum bei 3,0 wegen größter Chance auf 2 oder 4 bit flip
    - pmut; alle recht ähnlich und keine großen Sprünge aber optimum eher zwischen 2 und 3
    - RLS-N(k=2) ist am schnellsten aber findet manchmal Lösungen nicht, obwohl sie EA-SM(3/n) findet
algo type;        RLS-N; EA-SM;  pmut
algo param;         k=2;   3/n; -2,25
avg mut/change;   2,000; 3,092; 3,965
total avg count;    302;   677;   691

----------------------------------------------------------------------------------------------------

Geometric verteilt mit p = 0,001
    -rls; r=2;    r=3;    r=4;    n=2;    n=3;    n=4;      -
    -ea; 2/n;       -;     3/n;     4/n;     5/n;    10/n;    50/n;   100/n
    -pmut; -3,25;   -3,00;   -2,50;   -2,75;   -2,25;   -2,00;   -1,75;   -1,50;   -1,25
    - ea; 3 und standard sind ähnlich gut
    - allgemein wichtig Elemente tauschen zu können aber auch einzelne elemente zu verschieben -> tausch > einzeln
    - Ähnlich Ergebnisse wie bei uniformer Verteilung aber hier bit flips ungerader Anzahl wichtiger (vermutlich
      wegen vielen kleinen Elementen die verschoben werden können.
algo type;         RLS-R;   pmut;  EA-SM
algo param;          k=2;  -3,25;    2/n
avg mut/change;    1,483;  1,693;  2,258
total avg count;   2.407;  2.695;  3.421

----------------------------------------------------------------------------------------------------

Mehrere Felder mit Summe am Ende (Rest 1) mit 100 Felder mit Summe
    -rls; n=3;    r=4;    r=3;    r=2;      -;    n=4;    n=2
    -ea; 50/n;  100/n;   10/n;    5/n;    4/n;    3/n;    2/n;      -
    -pmut; -1,25;   -1,50;   -1,75;   -2,00;   -2,25;   -2,50;   -2,75;   -3,00;   -3,25
    - allgemein je höher desto besser ( je nach anzahl der Summenfelder)
    - rls n 2,4 tun sich schwerer vermutlich weil nur sehr wenig ungerade bit flips passieren
    - Für 100 Felder mit Summe 1,0 -> 1,5 -> 2,0 -> 3,0 -> 4,0 -> 10,0 -> 50 <- 100
    - Für 10  Felder mit Summe 1,0 -> 1,5 -> 2,0 -> 3,0 -> 4,0 -> 10,0 -> 50 -> 100
    - Für 5   Felder mit Summe 1,0 -> 1,5 -> 2,0 -> 3,0 -> 4,0 -> 10,0 -> 50 <- 100
algo type;           pmut;   EA-SM;   RLS-N
algo param;         -1,25;    50/n;     k=3
avg mut/change;   138,864;  49,765;   3,000
avg mut/step;     226,341;  49,988;   3,000
total avg count;       50;      52;     182

----------------------------------------------------------------------------------------------------


+++++++++ 0; [RLS   with  - , EA-SM with  2/n, fmut with 0,100] -> RLS   with  -  +++++++++
+++++++++ 1; [RLS-N with k=2, EA-SM with  4/n, fmut with 0,250] -> RLS-N with k=2 +++++++++
+++++++++ 2; [RLS   with  - , EA    with   - , fmut with 0,900] -> RLS   with  -  +++++++++
+++++++++ 3; [RLS   with  - , EA    with   - , fmut with 0,900] -> RLS   with  -  +++++++++
+++++++++ 4; [RLS-N with k=3, EA-SM with 10/n, fmut with 0,500] -> fmut with 0,50 +++++++++
+++++++++ 5; [RLS-N with k=3, EA-SM with 10/n, fmut with 0,500] -> fmut with 0,50 +++++++++
+++++++++ 6; [RLS-R with k=3, EA-SM with  4/n, fmut with 0,100] -> EA-SM with 4/n +++++++++
+++++++++ 7; [RLS-N with k=2, EA-SM with  3/n, fmut with 0,100] -> RLS-N with k=2 +++++++++
+++++++++ 8; [RLS-R with k=2, EA-SM with  2/n, fmut with 0,250] -> RLS-R with k=2 +++++++++


//TODO auf den neusten Stand bringen