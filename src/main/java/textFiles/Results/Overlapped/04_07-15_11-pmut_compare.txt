number of runs:  1.000
Limit per run:   9.210.300
array length:    10.000
ratio 100 * m/n: 0,16653 -> easy
input type:      invalid input (12)
---------
algo type:                pmut;         pmut;         pmut;         pmut;         pmut;         pmut;         pmut;         pmut;         pmut
algo param:              -2,00;        -2,25;        -1,75;        -2,50;        -2,75;        -1,50;        -3,00;        -3,25;        -1,25
avg mut/change:          6,738;        4,132;       14,905;        2,817;        2,298;       37,736;        2,008;        1,832;       96,985
avg mut/step:            8,485;        4,364;       22,232;        2,906;        2,271;       70,714;        1,934;        1,729;      224,557
---------
total avg count:       292.521;      292.763;      304.924;      307.403;      322.391;      337.925;      356.686;      377.068;      419.335
avg eval count:        292.521;      292.763;      304.924;      307.403;      322.391;      337.925;      356.686;      377.068;      419.335
max eval count:      3.811.952;    1.930.058;    2.875.275;    2.364.678;    2.233.600;    4.824.371;    2.832.218;    3.395.371;    3.133.351
min eval count:            535;          251;          202;          105;          124;          560;          104;           52;          841
---------
fails:                       0;            0;            0;            0;            0;            0;            0;            0;            0
fail ratio:              0,000;        0,000;        0,000;        0,000;        0,000;        0,000;        0,000;        0,000;        0,000
avg fail dif:               -1;           -1;           -1;           -1;           -1;           -1;           -1;           -1;           -1
---------
RLS     -> standard RLS: uniform random neighbour with Hamming Distance == 1
RLS-N   -> modified RLS: uniform random neighbour with Hamming Distance <= n
RLS-R   -> modified RLS: uniform random neighbour with Hamming Distance == x, where x is chosen uniform random from {1,...,r}
EA      -> standard EA : each bit is flipped with prob 1/n
EA-SM   -> modified EA : each bit is flipped with prob c/n
fmut    -> 1 bit flip with prob p and uniform random amount with 1-p
pmut    -> flips k random bits where k is chosen from powerlaw distribution
