Input; [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ..., 1, 1, 1, 1, 1, 1, 1, 1, 1, 9999]
input type;      OneMax equivalent for partition (2)
array length;    10.000
number of runs;  1.000
Limit per run;   921.030
ratio 100 * m/n; 0,13288 -> easy
---------
algo type;            RLS;   RLS-R;   RLS-R;   RLS-R;   RLS-N;   RLS-N;   RLS-N
algo param;             -;     r=2;     r=3;     r=4;     n=2;     n=3;     n=4
avg mut/change;     1,000;   1,181;   1,688;   1,865;   1,997;   3,000;   3,997
avg mut/step;       1,000;   1,500;   2,000;   2,500;   2,000;   3,000;   4,000
---------
total avg count;   90.931; 168.311; 236.317; 307.533; 921.030; 921.030; 921.030
avg eval count;    90.931; 168.311; 236.317; 307.533;      -1;      -1;      -1
max eval count;   156.854; 296.206; 498.474; 595.831;       0;       0;       0
min eval count;    64.941; 120.582; 158.304; 212.193;      -1;      -1;      -1
---------
fails;                  0;       0;       0;       0;   1.000;   1.000;   1.000
fail ratio;         0,000;   0,000;   0,000;   0,000;   1,000;   1,000;   1,000
avg fail dif;          -1;      -1;      -1;      -1;      53;      36;     263
---------
RLS     -> standard RLS; uniform random neighbour with Hamming Distance == 1
RLS-N   -> modified RLS; uniform random neighbour with Hamming Distance <= k
RLS-R   -> modified RLS; uniform random neighbour with Hamming Distance == x, where x is chosen uniform random from {1,...,k}
EA      -> standard EA ; each bit is flipped with prob 1/n
EA-SM   -> modified EA ; each bit is flipped with prob c/n
fmut    -> 1 bit flip with prob p and uniform random amount with 1-p
